const path = require("path");
const { CleanWebpackPlugin } = require("clean-webpack-plugin");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const CopyWebpackPlugin = require("copy-webpack-plugin");

/**
 * Common webpack configuration for production and dev
 */
module.exports = {
	entry: {
		entry: "./src/index.js",
	},
	plugins: [
		new HtmlWebpackPlugin({
			template: "index.html",
			inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
		}),
		new MiniCssExtractPlugin(),
		new CleanWebpackPlugin({
			filename: "[name].[hash].css",
			chunkFilename: "[id].[hash].css",
		}),
		new CopyWebpackPlugin({
			patterns: [{ from: "src/images/favicon.png", to: "favicon.png" }],
		}),
	],
	output: {
		filename: "[name].bundle.js",
		path: path.resolve(__dirname, "dist"),
	},
	resolve: {
		extensions: [".js", ".jsx", ".css"],
	},

	module: {
		rules: [
			{
				test: /\.(js|jsx)$/,
				exclude: /(node_modules)/,
				use: {
					loader: "babel-loader",
					options: {
						presets: ["@babel/preset-env"],
						plugins: ["@babel/plugin-proposal-object-rest-spread"],
					},
				},
			},
			{
				test: /\.(html|png|jpe?g|gif|eot|ttf|woff|woff2)$/i,
				loader: "url-loader",
				options: {
					limit: 8192,
				},
				exclude: [/index.html/],
			},
			{
				test: /\.css$/,
				use: [
					MiniCssExtractPlugin.loader,
					{
						loader: "css-loader",
						options: {
							modules: true,
						},
					},
				],

				exclude: /global.css/,
			},
			{
				test: /\.svg$/,
				use: "file-loader",
			},
			{
				test: [/global.css/],
				use: [
					"style-loader",
					{
						loader: "css-loader",
						options: {
							sourceMap: true,
						},
					},
					"postcss-loader",
				],
			},
		],
	},
};
